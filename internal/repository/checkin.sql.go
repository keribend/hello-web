// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: checkin.sql

package repository

import (
	"context"
	"time"
)

const checkinsForEvent = `-- name: CheckinsForEvent :many
SELECT event.id, event.name, event.create_time, checkin.id, checkin.event_id, checkin.create_time
FROM checkin
    INNER JOIN event ON checkin.event_id = event.id
WHERE
    event.id = ?
ORDER BY checkin.create_time DESC
`

type CheckinsForEventRow struct {
	Event      Event     `json:"event"`
	ID         int64     `json:"id"`
	EventID    int64     `json:"event_id"`
	CreateTime time.Time `json:"create_time"`
}

func (q *Queries) CheckinsForEvent(ctx context.Context, id int64) ([]CheckinsForEventRow, error) {
	rows, err := q.db.QueryContext(ctx, checkinsForEvent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckinsForEventRow
	for rows.Next() {
		var i CheckinsForEventRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.Name,
			&i.Event.CreateTime,
			&i.ID,
			&i.EventID,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteCheckin = `-- name: DeleteCheckin :exec
DELETE FROM checkin WHERE id = ?
`

func (q *Queries) DeleteCheckin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCheckin, id)
	return err
}

const insertCheckinForEvent = `-- name: InsertCheckinForEvent :exec
INSERT INTO checkin (event_id) VALUES (?)
`

func (q *Queries) InsertCheckinForEvent(ctx context.Context, eventID int64) error {
	_, err := q.db.ExecContext(ctx, insertCheckinForEvent, eventID)
	return err
}

const updateCheckinTime = `-- name: UpdateCheckinTime :exec
UPDATE checkin SET create_time = ? WHERE id = ?
`

type UpdateCheckinTimeParams struct {
	CreateTime time.Time `json:"create_time"`
	ID         int64     `json:"id"`
}

func (q *Queries) UpdateCheckinTime(ctx context.Context, arg UpdateCheckinTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateCheckinTime, arg.CreateTime, arg.ID)
	return err
}
